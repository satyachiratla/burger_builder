{"version":3,"sources":["hoc/Aux.js","components/Layout/Layout.js","components/BurgerIngredient/BurgerIngredient.js","components/Burger/Burger.js","containers/BurgerBuilder/BurgerBuilder.js","App.js","reportWebVitals.js","index.js"],"names":["Aux","props","children","Layout","className","BurgerIngredient","ingredient","this","type","Component","Burger","transformedIngredients","Object","keys","ingredients","map","igKey","Array","_","i","reduce","arr","el","concat","length","BurgerBuilder","state","salad","meat","cheese","bacon","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAEeA,G,MAFH,SAACC,GAAD,OAAWA,EAAMC,W,eCadC,EATA,SAACF,GAAD,OACX,eAAC,EAAD,WACI,kEACA,sBAAMG,UAAU,UAAhB,SACKH,EAAMC,e,mCCmCJG,G,wKAtCX,WACI,IAAIC,EAAa,KAErB,OAAQC,KAAKN,MAAMO,MACf,IAAM,eACFF,EAAa,qBAAKF,UAAU,gBAC5B,MACJ,IAAM,YACFE,EACA,sBAAKF,UAAU,WAAf,UACI,qBAAKA,UAAU,WACf,qBAAKA,UAAU,cAGnB,MACJ,IAAM,OACFE,EAAa,qBAAKF,UAAU,SAC5B,MACJ,IAAM,SACFE,EAAa,qBAAKF,UAAU,WAC5B,MACJ,IAAM,QACFE,EAAa,qBAAKF,UAAU,UAC5B,MACJ,IAAM,QACFE,EAAa,qBAAKF,UAAU,UAC5B,MACJ,QACIE,EAAa,KAErB,OAAOA,M,GA/BoBG,cCuBhBC,EAtBA,SAAET,GACb,IAAIU,EAAyBC,OAAOC,KAAMZ,EAAMa,aAC3CC,KAAK,SAAAC,GACF,OAAO,YAAIC,MAAOhB,EAAMa,YAAYE,KAAUD,KAAK,SAAEG,EAAGC,GACpD,OAAO,cAAC,EAAD,CAAkCX,KAAMQ,GAAjBA,EAAQG,SAG7CC,QAAO,SAACC,EAAKC,GACV,OAAOD,EAAIE,OAAOD,KACnB,IAIP,OAHsC,IAAlCX,EAAuBa,SACvBb,EAAyB,kEAGzB,sBAAKP,UAAU,SAAf,UACI,cAAC,EAAD,CAAkBI,KAAK,cACtBG,EACD,cAAC,EAAD,CAAkBH,KAAK,qBCGpBiB,E,4MAnBXC,MAAQ,CACJZ,YAAa,CACTa,MAAO,EACPC,KAAM,EACNC,OAAQ,EACRC,MAAO,I,4CAIf,WACI,OACI,eAAC,EAAD,WACI,cAAC,EAAD,IACA,wD,GAfYrB,aCUbsB,MAVf,WACE,OACE,qBAAK3B,UAAU,MAAf,SACC,cAAC,EAAD,UACE,cAAC,EAAD,SCIQ4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.153e682c.chunk.js","sourcesContent":["const Aux = (props) => props.children;\n\nexport default Aux;","import React from 'react';\nimport Aux from '../../hoc/Aux';\nimport './Layout.css'\n\nconst Layout = (props) => (\n    <Aux>\n        <div> Toolbar, SideDrawer, Backdrop </div>\n        <main className=\"content\">\n            {props.children}\n        </main>\n    </Aux>\n);\n\nexport default Layout;\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types';\nimport './BurgerIngredient.css';\n\nclass BurgerIngredient extends Component {\n    render () {\n        let ingredient = null;\n\n    switch (this.props.type) {\n        case ('bread-bottom'):\n            ingredient = <div className=\"BreadBottom\"></div>;\n            break;\n        case ('bread-top'):\n            ingredient = (\n            <div className=\"BreadTop\">\n                <div className=\"Seeds1\"></div>\n                <div className=\"Seeds2\"></div>\n            </div>\n            );\n            break;\n        case ('meat'):\n            ingredient = <div className=\"Meat\"></div>;\n            break;\n        case ('cheese'):\n            ingredient = <div className=\"Cheese\"></div>;\n            break;\n        case ('salad'):\n            ingredient = <div className=\"Salad\"></div>;\n            break;\n        case ('bacon'):\n            ingredient = <div className=\"Bacon\"></div>;\n            break;\n        default:\n            ingredient = null;\n    }\n    return ingredient;\n  }\n}\n\nBurgerIngredient.propTypes = {\n    type: PropTypes.string.isRequired\n}\n\nexport default BurgerIngredient;","import React from 'react';\n\nimport './Burger.css';\nimport BurgerIngredient from '../BurgerIngredient/BurgerIngredient';\n\nconst Burger = ( props ) => {\n    let transformedIngredients = Object.keys( props.ingredients )\n        .map( igKey => {\n            return [...Array( props.ingredients[igKey] )].map( ( _, i ) => {\n                return <BurgerIngredient key={igKey + i} type={igKey} />;\n            } );\n        } )\n        .reduce((arr, el) => {\n            return arr.concat(el)\n        }, []);\n    if (transformedIngredients.length === 0) {\n        transformedIngredients = <p>Please start adding ingredients!</p>;\n    }\n    return (\n        <div className='burger'>\n            <BurgerIngredient type=\"bread-top\" />\n            {transformedIngredients}\n            <BurgerIngredient type=\"bread-bottom\" />\n        </div>\n    );\n};\n\nexport default Burger;","import React, { Component } from 'react';\nimport Burger from '../../components/Burger/Burger';\nimport Aux from '../../hoc/Aux';\n\nclass BurgerBuilder extends Component {\n\n    state = {\n        ingredients: {\n            salad: 1,\n            meat: 1,\n            cheese: 2,\n            bacon: 2,\n        }\n    }\n    \n    render () {\n        return (\n            <Aux>\n                <Burger />\n                <div>Build Controls</div>\n            </Aux>\n        );\n    }\n}\n\nexport default BurgerBuilder;","import React from 'react';\nimport Layout from './components/Layout/Layout';\nimport BurgerBuilder from './containers/BurgerBuilder/BurgerBuilder'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Layout>\n       <BurgerBuilder />\n     </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}